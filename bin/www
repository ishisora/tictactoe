#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('tictactoe:server');
const http = require('http');
const WebSocket = require('ws');
const { hostname, port } = require('../config/config');
const rooms = require('../service/rooms.js');
const users = require('../service/users.js');

app.set('hostname', hostname);
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

// WebSocket
const wss = new WebSocket.Server({ server });

const sessionMiddleware = app.get('sessionMiddleware');

wss.on('connection', (ws, req) => {
    console.log("wss.clients.size = ", wss.clients.size);
    console.log(`Client connected`);
    console.log(`roomsdebug2: ${JSON.stringify(rooms)}`);
    console.log(`usersdebug2: ${JSON.stringify(users)}`);
    sessionMiddleware(req, {}, () => {
        console.log(req.session);
        if (users[req.session.userId]) {
            const room = users[req.session.userId];
            rooms[room].players.websockets.add(ws);
            console.log(room, "websockets.size = ", rooms[room].players.websockets.size);
            console.log(`roomdebug1${room}`);
            let player = '';
            if (rooms[room].players.o === req.session.userId) {
                player = 'o';
            } else {
                player = 'x';
            }
            const squares = rooms[room].states.squares;
            ws.send(JSON.stringify({ type: 'init', message: player, squares: squares }));
        } else {
            console.log('req.session.userIdの値がない');
        }
    });

    ws.addEventListener('error', console.error);

    ws.addEventListener('close', () => {
        console.log('Client disconnected');
    });

    ws.addEventListener('message', (event) => {
        console.log(`Received: ${JSON.stringify(event.data)}`);
        console.log("req.session = ", req.session);

        const room = users[req.session.userId];

        const message = JSON.parse(event.data);

        switch (message.type) {
            case 'playing':
                if (message.type === 'playing') {
                    if (message.player === rooms[room].states.nowPlayer && rooms[room].states.squares[message.index] === '') {
                        rooms[room].states.squares[message.index] = message.player;

                        rooms[room].players.websockets.forEach((ws) => {
                            ws.send(JSON.stringify({ type: 'playing', message: message.index, squares: rooms[room].states.squares }));
                        });

                        if (rooms[room].states.nowPlayer === 'o') {
                            rooms[room].states.nowPlayer = 'x';
                        } else {
                            rooms[room].states.nowPlayer = 'o';
                        }
                    } else {
                        console.log("!(message.player === rooms[room].states.nowPlayer && squares[message.index] === '')")
                    }

                }
                break;
            case 'reset':
                console.log('message.type = reset');
                rooms[room].players.websockets.forEach((ws) => {
                    ws.send(JSON.stringify({ type: 'reset' }));
                });
                rooms[room].states.squares = ['', '', '', '', '', '', '', '', ''];
                rooms[room].states.nowPlayer = 'o';
        }
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, hostname, () => {
    console.log(`debug log: ${JSON.stringify(server.address())}`);
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
